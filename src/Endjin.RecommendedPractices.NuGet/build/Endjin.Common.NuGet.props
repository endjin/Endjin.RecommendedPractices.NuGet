<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Authors>Endjin Limited</Authors>
    <!-- Note: Copyright property is not specific to NuGet so we set it elsewhere -->

    <!--
      We require license acceptance, but since we use different licenses in different scenarios,
      the Endjin.RecommendedPractices NuGet package does not specify a license. The result is that
      when you try to produce a package, you will get a build error complaining that a license must
      be set if PackageRequireLicenseAcceptance is true.

      Projects using the Endjin.RecommendedPractices NuGet package must therefore set the
      license, in their .csproj e.g.:

      <PropertyGroup>
        <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
      </PropertyGroup>

      Projects that will not produce a NuGet package do not need to do this. (There should of
      course still be a license at the top of the repo. It's just that there's no project-specific
      technical requirement to specify the license in projects that don't produce packages.)
    -->
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>

    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <Deterministic>true</Deterministic>
    <!-- https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#system-variables -->
    <ContinuousIntegrationBuild Condition="'$(TF_BUILD)' == 'true'">True</ContinuousIntegrationBuild>
  </PropertyGroup>

    <!--
      PackageIconUrl has been deprecated by NuGet, so we need to use <PackageIcon>.

      The Endjin.RecommendedPractices NuGet package presumes that the icon lives in
      the parent directory, and is called PackageIcon.png. You can disable this
      presumption by setting this property:

      <EndjinDisableDefaultPackageIconInclusion>true</EndjinDisableDefaultPackageIconInclusion>

      If you do this, you must ensure that a PackageIcon.png is added to the packaged output by
      other means.

      As long as you haven't disabled this behaviour with the property shown above (or
      by setting <IsPackable>false</IsPackable> because you're not building a package)
      we check for the existence of PackageIcon.png in the solution folder, and if it doesn't
      exist, we copy a default icon into place. (This is done by Endjin.Common.Net.targets.)

      The following PropertyGroup and ItemGroup arrange to use that solution-level package
      icon. These are conditional on the existence of the file, because otherwise we get
      some baffling first-use behaviour: the package icon file will appear in Solution
      Explorer but with a red X by it, because the file doesn't exist yet. We don't get
      an opportunity to copy the default icon file into place until the first time a
      build runs. And unfortunately that error icon doesn't go away even after the file gets
      created - you have to unload and reload the solution after building it, which is
      non-obvious and annoying. So instead, if the file's not there yet, we don't
      attempt to use it. This means that the PackageIcon.png file won't show up in
      Solution Explorer to start with - it requires a build-unload-reload to make it
      appear. (The first build creates it, then unloading and reloading the
      solution is necessary for Solution Explorer to notice the change.) But this way
      it's less obtrusive - instead of getting a big red X, you just don't see the
      PackageIcon.png to begin with.
    -->

  <PropertyGroup Condition="($(IsPackable) != 'false') and ($(EndjinDisableDefaultPackageIconInclusion) != 'true') and (Exists('$(SolutionDir)PackageIcon.png'))">
    <PackageIcon>PackageIcon.png</PackageIcon>
  </PropertyGroup>

  <ItemGroup Condition="($(IsPackable) != 'false') and ($(EndjinDisableDefaultPackageIconInclusion) != 'true') and (Exists('$(SolutionDir)PackageIcon.png'))">
    <!--
      We can't use $(SolutionDir) because that's set to the normal solution folder in "dotnet pack"
      builds, because the Azure DevOps dotnet task runs "dotnet pack" once for each csproj instead
      of for the whole solution. So we just have to presume it's in the parent folder. In cases
      where that's not true, prjects can set

      <EndjinDisableDefaultPackageIconInclusion>true</EndjinDisableDefaultPackageIconInclusion>

      and add the package icon themselves.
    -->
    <None Include="../PackageIcon.png" Pack="true" PackagePath="\"/>
  </ItemGroup>

</Project>