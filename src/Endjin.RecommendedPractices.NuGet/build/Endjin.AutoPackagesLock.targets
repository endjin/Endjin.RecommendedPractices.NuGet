<!--
    Checked generation of lock packages is enabled in projects that need them.
    
    If this erroneously detects that your project requires lock files, you
    can set EndjinDisableAutoPackagesLock to true to disable it. Conversely,
    if you have a project that requires lock files, you can set EndjinAutoPackagesLock
    to true to enable detection. But since this package can only advise and not
    control the relevant settings (see comments below) you'll still have to
    enable it in your project file.
-->

<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" InitialTargets="_EndjinCheckImport">
  <Target Name="_EndjinConfigureAutoPackagesLock" BeforeTargets="CollectPackageReferences">
    <PropertyGroup Condition="($(EndjinAutoPackagesLock) == 'true')">
      <_EndjinAutoPackagesLock>true</_EndjinAutoPackagesLock>
    </PropertyGroup>
    <PropertyGroup Condition="($(EndjinDisableAutoPackagesLock) == 'true')">
      <_EndjinAutoPackagesLock>false</_EndjinAutoPackagesLock>
    </PropertyGroup>
    <PropertyGroup Condition="($(_EndjinAutoPackagesLock) == '')">
      <_EndjinAutoPackagesLock Condition="($(OutputType) == 'Exe') or ($(OutputType) == 'Exe')">true</_EndjinAutoPackagesLock>
      <_EndjinAutoPackagesLock Condition="($(OutputType) == 'Library') and ($(AzureFunctionsVersion) != '')">true</_EndjinAutoPackagesLock>
     </PropertyGroup>
    <PropertyGroup Condition="$(_EndjinAutoPackagesLock) == 'true'">
      <!--
        This project builds runnable artifacts, or is a test host. To ensure repeatability, we need
        floating versions in PackageReferences (either in this project, or anywhere in its
        dependency tree) get resolved to the specific latest matching version. We use floating
        versions in components to avoid needing to update all our IP any time Microsoft releases a
        new patch of .NET, but we still need to be deliberate about taking those updates where they
        emerge at the top of the food chain. This project appears to be one of those places, so we
        use a package lock file to ensure repeatability. The package versions we reference will
        only change when we explicitly take the change.
      -->
      <_EndjinExpectedRestorePackagesWithLockFile>true</_EndjinExpectedRestorePackagesWithLockFile>
      <!--
        This ensures that during CI builds, the package restore will use exactly what's in the lock
        file, giving us repeatability. New versions of any of the packages for which we take floating
        version references (either directly, or implicitly through transitive dependencies) will not
        be picked up during those builds.
        When using the project locally, this won't be set, meaning that if any floating references
        to newer versions become available, they will automatically be acquired, and there will be a
        record of this happening in source control: the packages.lock.json file will be updated.
      -->
      <_EndjinExpectedCiBuildRestoreLockedMode>true</_EndjinExpectedCiBuildRestoreLockedMode>
    </PropertyGroup>

    <!--
      Sadly we can't set the build properties directly, because we can't get ourselves injected
      into the build process at the right point. This is because the part we want to influence
      is the NuGet package resolution process. But we *are* a NuGet package, so that process
      necessarily runs before we get to participate. So all we can do is check to see whether
      the project is set up the way it should be, and make a recommendation if not.
    -->
    <Error
      Condition="('$(_EndjinAutoPackagesLock)' == 'true') And (('$(RestorePackagesWithLockFile)' != '$(_EndjinExpectedRestorePackagesWithLockFile)') or (('$(ContinuousIntegrationBuild)' == 'true') And ('$(RestoreLockedMode)' != '$(_EndjinExpectedCiBuildRestoreLockedMode)')))"
      Text="Properties for package lock file generation are not set correctly, and they should normally be enabled for this project type. You can suppress this message by setting the EndjinDisableAutoPackagesLock build variable to true, but in most cases you should add the following PropertyGroup to your project file:&#x0A;&lt;PropertyGroup&gt;&#x0A;  &lt;RestorePackagesWithLockFile&gt;true&lt;/RestorePackagesWithLockFile&gt;&#x0A;  &lt;RestoreLockedMode Condition=&quot;%24(ContinuousIntegrationBuild) == 'true'&quot;&gt;true&lt;/RestoreLockedMode&gt;&#x0A;&lt;/PropertyGroup&gt;&#x0A;"
      />

  </Target>
</Project>